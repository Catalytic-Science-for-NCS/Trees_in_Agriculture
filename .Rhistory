ggrepel::geom_label_repel(inherit.aes = F,
data = long_updated[long_updated$country_label=="label",],
aes(x=Total_MgC/30/1e+9*(44/12), y=Flux_density*(44/12), label=NAME),
size=2,
nudge_y = 0.25,
segment.size  = 0.15,
min.segment.length = 0.2,
box.padding = 0.10,
label.padding = 0.10,
max.overlaps = 6,
color="grey40")+
labs(x=expression(Total~Annual~Mitigation~Potential~(Pg~CO[2]~Yr^{-1})), y=expression(Mean~Flux~Density~(Mg~CO[2]~Ha^{-1}~Yr^{-1})))+
theme(strip.placement = "outside",
panel.spacing = unit(1, "lines"),
legend.spacing.y = unit(0.75, 'cm'))+
scale_fill_discrete(name="Geography")+
scale_colour_discrete(name="Geography");fig9
ggsave("C:/Users/vgriffey/OneDrive - Conservation International Foundation/VivianAnalyses/Draft Figures/draft_fig8_annualPotential_fluxDensity_90.png",
fig9, width=10, height=5, bg='white')
fig9 <- ggplot(data=long_updated[!is.na(long_updated$AgArea_ha),],
aes(x=Total_MgC/30/1e+9*(44/12), y=Flux_density*(44/12), fill=lat, color=lat))+ #modifying total_MgC and flux density to convert from C to CO2 and to take total MgC from 30 years to annual and to Pg
geom_hline(aes(yintercept = fluxdens_90*(44/12)), color = "grey40", linetype="dashed")+
geom_vline(aes(xintercept = total_mitigation_90/30/1e+9*(44/12)), color = "grey40", linetype="dashed")+
geom_point(shape=21)+
facet_grid(~Ag.Type)+
ggrepel::geom_label_repel(inherit.aes = F,
data = long_updated[long_updated$country_label!="label",],
aes(x=Total_MgC/30/1e+9*(44/12), y=Flux_density*(44/12), label=NAME),
size=2,
nudge_y = 0.25,
segment.size  = 0.15,
min.segment.length = 0.1,
box.padding = 0.10,
label.padding = 0.10,
max.overlaps = 3,
color="grey40")+
ggrepel::geom_label_repel(inherit.aes = F,
data = long_updated[long_updated$country_label=="label",],
aes(x=Total_MgC/30/1e+9*(44/12), y=Flux_density*(44/12), label=NAME),
size=2,
nudge_y = 0.25,
segment.size  = 0.15,
min.segment.length = 0.2,
box.padding = 0.10,
label.padding = 0.10,
max.overlaps = 5,
color="grey40")+
labs(x=expression(Total~Annual~Mitigation~Potential~(Pg~CO[2]~Yr^{-1})), y=expression(Mean~Flux~Density~(Mg~CO[2]~Ha^{-1}~Yr^{-1})))+
theme(strip.placement = "outside",
panel.spacing = unit(1, "lines"),
legend.spacing.y = unit(0.75, 'cm'))+
scale_fill_discrete(name="Geography")+
scale_colour_discrete(name="Geography");fig9
ggsave("C:/Users/vgriffey/OneDrive - Conservation International Foundation/VivianAnalyses/Draft Figures/draft_fig8_annualPotential_fluxDensity_90.png",
fig9, width=10, height=5, bg='white')
fig9 <- ggplot(data=long_updated[!is.na(long_updated$AgArea_ha),],
aes(x=Total_MgC/30/1e+9*(44/12), y=Flux_density*(44/12), fill=lat, color=lat))+ #modifying total_MgC and flux density to convert from C to CO2 and to take total MgC from 30 years to annual and to Pg
geom_hline(aes(yintercept = fluxdens_90*(44/12)), color = "grey40", linetype="dashed")+
geom_vline(aes(xintercept = total_mitigation_90/30/1e+9*(44/12)), color = "grey40", linetype="dashed")+
geom_point(shape=21)+
facet_grid(~Ag.Type)+
ggrepel::geom_label_repel(inherit.aes = F,
data = long_updated[long_updated$country_label!="label",],
aes(x=Total_MgC/30/1e+9*(44/12), y=Flux_density*(44/12), label=NAME),
size=2.1,
nudge_y = 0.25,
segment.size  = 0.15,
min.segment.length = 0.1,
box.padding = 0.10,
label.padding = 0.10,
max.overlaps = 3,
color="grey40")+
ggrepel::geom_label_repel(inherit.aes = F,
data = long_updated[long_updated$country_label=="label",],
aes(x=Total_MgC/30/1e+9*(44/12), y=Flux_density*(44/12), label=NAME),
size=2.1,
nudge_y = 0.25,
segment.size  = 0.15,
min.segment.length = 0.2,
box.padding = 0.10,
label.padding = 0.10,
max.overlaps = 5,
color="grey40")+
labs(x=expression(Total~Annual~Mitigation~Potential~(Pg~CO[2]~Yr^{-1})), y=expression(Mean~Flux~Density~(Mg~CO[2]~Ha^{-1}~Yr^{-1})))+
theme(strip.placement = "outside",
panel.spacing = unit(1, "lines"),
legend.spacing.y = unit(0.75, 'cm'))+
scale_fill_discrete(name="Geography")+
scale_colour_discrete(name="Geography");fig9
ggsave("C:/Users/vgriffey/OneDrive - Conservation International Foundation/VivianAnalyses/Draft Figures/draft_fig8_annualPotential_fluxDensity_90.png",
fig9, width=10, height=5, bg='white')
fig9 <- ggplot(data=long_updated[!is.na(long_updated$AgArea_ha),],
aes(x=Total_MgC/30/1e+9*(44/12), y=Flux_density*(44/12), fill=lat, color=lat))+ #modifying total_MgC and flux density to convert from C to CO2 and to take total MgC from 30 years to annual and to Pg
geom_hline(aes(yintercept = fluxdens_90*(44/12)), color = "grey40", linetype="dashed")+
geom_vline(aes(xintercept = total_mitigation_90/30/1e+9*(44/12)), color = "grey40", linetype="dashed")+
geom_point(shape=21)+
facet_grid(~Ag.Type)+
ggrepel::geom_label_repel(inherit.aes = F,
data = long_updated[long_updated$country_label!="label",],
aes(x=Total_MgC/30/1e+9*(44/12), y=Flux_density*(44/12), label=NAME),
size=2.2,
nudge_y = 0.25,
segment.size  = 0.15,
min.segment.length = 0.1,
box.padding = 0.10,
label.padding = 0.10,
max.overlaps = 3,
color="grey40")+
ggrepel::geom_label_repel(inherit.aes = F,
data = long_updated[long_updated$country_label=="label",],
aes(x=Total_MgC/30/1e+9*(44/12), y=Flux_density*(44/12), label=NAME),
size=2.2,
nudge_y = 0.25,
segment.size  = 0.15,
min.segment.length = 0.2,
box.padding = 0.10,
label.padding = 0.10,
max.overlaps = 5,
color="grey40")+
labs(x=expression(Total~Annual~Mitigation~Potential~(Pg~CO[2]~Yr^{-1})), y=expression(Mean~Flux~Density~(Mg~CO[2]~Ha^{-1}~Yr^{-1})))+
theme(strip.placement = "outside",
panel.spacing = unit(1, "lines"),
legend.spacing.y = unit(0.75, 'cm'))+
scale_fill_discrete(name="Geography")+
scale_colour_discrete(name="Geography");fig9
ggsave("C:/Users/vgriffey/OneDrive - Conservation International Foundation/VivianAnalyses/Draft Figures/draft_fig8_annualPotential_fluxDensity_90.png",
fig9, width=10, height=5, bg='white')
library(tidyverse)
library(sf)
dir <- "C:/Users/vgriffey/OneDrive - Conservation International Foundation/Documents/GitHub/Trees_in_Agriculture/"
setwd(dir)
#get m2 per crop and graze per country
fls <- list.files(paste0(dir, "data/06_21_2023/"),
pattern="*.area*.*all", full.names = T)
tbs <- lapply(fls, read.csv)
check <- identical(tbs[[1]][,c("ISO3","COUNTRY", "BIOME_NAME", "BIOME_NUM")], tbs[[2]][,c("ISO3","COUNTRY", "BIOME_NAME", "BIOME_NUM")])
#combine crop and grazing together if the rows are the same, otherwise break
if (nrow(tbs[[1]])==nrow(tbs[[2]])) {
agarea <- cbind(tbs[[1]], tbs[[2]][,"sum"]) %>%
select(-X)
} else {
break
}
#your basenames should have tic (trees in croplands) or tip (trees in pasturelands) in their names
colnames(agarea) <- c( "BIOME_NAME","BIOME_NUM","ISO3","NAME", str_extract(gsub(".csv", "", basename(fls[[1]])), "tic|tip"),
str_extract(gsub(".csv", "", basename(fls[[2]])), "tic|tip"))
#use countrycode package to get consistent country names from ISO3 codes
agarea$full_name <- countrycode::countrycode(agarea$ISO3, "iso3c","country.name")
agarea <- agarea[agarea$ISO3!="C--" & agarea$ISO3!="P--" & agarea$ISO3!="S--",] #remove 3 weird small islands
agarea[agarea==0] <- NA
agarea <- agarea[!duplicated(agarea[,c("ISO3", "BIOME_NAME","BIOME_NUM")]),]
#calculate amount of crop and grazing land per country
agarea_byCountry <- agarea %>%
group_by(ISO3) %>%
summarize(CropArea_ha_positive = sum(tic, na.rm=T),
GrazeArea_ha_positive = sum(tip, na.rm=T))
agarea_byCountry$ADM0_CODE <- countrycode::countrycode(agarea_byCountry$ISO3, "iso3c","gaul")
agarea_byCountry$full_name <- countrycode::countrycode(agarea_byCountry$ISO3, "iso3c","country.name")
#calculate amount of crop and grazing land per biome
agarea_byBiome <- agarea %>%
group_by(BIOME_NAME, BIOME_NUM) %>%
summarize(CropArea_ha_positive = sum(tic, na.rm=T),
GrazeArea_ha_positive = sum(tip,na.rm = T))
#calculate amount of crop and grazing land per tropics/non-tropics (based on biomes)
agarea_tropicnontropic <- agarea %>%
mutate(tropic_nontropic= case_when(BIOME_NAME=="Deserts & Xeric Shrublands" ~ "Nontropic",
BIOME_NAME=="Mediterranean Forests, Woodlands & Scrub" ~ "Nontropic",
BIOME_NAME=="Montane Grasslands & Shrublands" ~ "Nontropic",
BIOME_NAME=="Temperate Broadleaf & Mixed Forests" ~ "Nontropic",
BIOME_NAME=="Temperate Conifer Forests" ~ "Nontropic",
BIOME_NAME=="Temperate Grasslands, Savannas & Shrublands" ~ "Nontropic",
BIOME_NAME=="Tropical & Subtropical Coniferous Forests" ~ "Tropic",
BIOME_NAME=="Tropical & Subtropical Dry Broadleaf Forests" ~ "Tropic",
BIOME_NAME=="Tropical & Subtropical Grasslands, Savannas & Shrublands" ~ "Tropic",
BIOME_NAME=="Tropical & Subtropical Moist Broadleaf Forests" ~ "Tropic",
BIOME_NAME=="Boreal Forests/Taiga"~ "Nontropic")) %>%
group_by(tropic_nontropic) %>%
summarize(CropArea_ha_positive = sum(tic, na.rm=T),
GrazeArea_ha_positive = sum(tip,na.rm = T))
crop_extent_positive = sum(agarea$tic, na.rm = T)
graze_extent_positive = sum(agarea$tip, na.rm = T)
#function to get files based on filename pattern, check that they fit together, and combine into one dataframe
#also adds in belowground carbon using root:shoot ratios by biome
get_metric <- function(pattern, sum_or_mean_column){
#load files into list
fls <- list.files(paste0(dir, "data/06_21_2023/"), pattern=pattern, full.names = T)
#fls <- fls[grep("boreal",fls, invert=T)]
tbs <- lapply(fls, read.csv)
#check to make sure they are the same dimensions and combine
check <- identical(tbs[[1]][,c("ISO3","COUNTRY", "BIOME_NUM")], tbs[[2]][,c("ISO3","COUNTRY","BIOME_NUM")])
if((nrow(tbs[[1]])==nrow(tbs[[2]])) & check){
comb <- cbind(tbs[[1]], tbs[[2]][,"sum"]) %>%
select(-X)
} else {
break
}
#clean up
colnames(comb) <- c("BIOME_NAME", "BIOME_NUM","ISO3","NAME", str_extract(gsub(".csv", "", basename(fls[[1]])), "tic|tip"),
str_extract(gsub(".csv", "", basename(fls[[2]])), "tic|tip"))
comb$full_name <- countrycode::countrycode(comb$ISO3, "iso3c","country.name")
comb <- comb[comb$ISO3!="C--" & comb$ISO3!="P--" & comb$ISO3!="S--",]
comb[comb==0] <- NA
comb <- comb[!duplicated(comb[,c("ISO3","BIOME_NAME","BIOME_NUM")]),]
#get root:shoot ratios per biome and join with agc per biomeCountry
#Mokany et al. 2006
rootshoot <- readxl::read_xlsx(paste0(dir, "data/RootShoot.xlsx"))
rootshoot <- rootshoot[1:11,]
join <- left_join(comb, rootshoot[,c("BIOME_NAME","Equivalent System in Mokany",
"Median Root:Shoot Ratio","Standard Error")], by="BIOME_NAME")
if((nrow(join)==nrow(comb))==FALSE){
print("stop now or die")
}
#we join each root:shoot ratio by biome to the biomeCountry aboveground value then
#multiply aboveground value perBiomeCountry by root:shoot ratio for each biome
join$crop_bgc_perBiomeCountry <- join$tic*join$`Median Root:Shoot Ratio`
join$graze_bgc_perBiomeCountry <- join$tip*join$`Median Root:Shoot Ratio`
join$crop_total_perBiomeCountry <- rowSums(join[, c("tic","crop_bgc_perBiomeCountry")])
join$graze_total_perBiomeCountry <- rowSums(join[, c("tip","graze_bgc_perBiomeCountry")])
return(join)
}
##################################################################
## CARBON ACCUMULATION
cacc <- get_metric(pattern="CarbonAcc.*all")
cacc <- cacc %>% mutate(tropic_nontropic= case_when(BIOME_NAME=="Deserts & Xeric Shrublands" ~ "Nontropic",
BIOME_NAME=="Mediterranean Forests, Woodlands & Scrub" ~ "Nontropic",
BIOME_NAME=="Montane Grasslands & Shrublands" ~ "Nontropic",
BIOME_NAME=="Temperate Broadleaf & Mixed Forests" ~ "Nontropic",
BIOME_NAME=="Temperate Conifer Forests" ~ "Nontropic",
BIOME_NAME=="Temperate Grasslands, Savannas & Shrublands" ~ "Nontropic",
BIOME_NAME=="Tropical & Subtropical Coniferous Forests" ~ "Tropic",
BIOME_NAME=="Tropical & Subtropical Dry Broadleaf Forests" ~ "Tropic",
BIOME_NAME=="Tropical & Subtropical Grasslands, Savannas & Shrublands" ~ "Tropic",
BIOME_NAME=="Tropical & Subtropical Moist Broadleaf Forests" ~ "Tropic",
BIOME_NAME=="Boreal Forests/Taiga" ~ "Nontropic"))
#sum per biomeCountry to country and biome level
country_cacc <- cacc %>%
subset(BIOME_NAME!="Boreal Forests/Taiga") %>%
group_by(ISO3) %>%
summarize(crop_C_perCountry = sum(crop_total_perBiomeCountry, na.rm=T),
graze_C_perCountry = sum(graze_total_perBiomeCountry, na.rm=T))
#country_cacc$ADM0_CODE <- countrycode::countrycode(country_cacc$ISO3, "iso3c","gaul")
#country_cacc$full_name <- countrycode::countrycode(country_cacc$ISO3, "iso3c","country.name")
biome_cacc <- cacc %>%
group_by(BIOME_NAME) %>%
summarize(crop_C_perBiome = sum(crop_total_perBiomeCountry, na.rm=T),
graze_C_perBiome = sum(graze_total_perBiomeCountry, na.rm=T))
tropic_nontropic_cacc <- cacc %>%
subset(BIOME_NAME!="Boreal Forests/Taiga") %>%
group_by(tropic_nontropic) %>%
summarize(crop_C = sum(crop_total_perBiomeCountry, na.rm=T),
graze_C = sum(graze_total_perBiomeCountry, na.rm=T))
## add total ag area
ctry_df <- read.csv("data/06_21_2023/country_results_06212023.csv")
fls <- list.files("data/06_21_2023/", pattern="potapov|ramankutty" full.names = T)
fls <- list.files("data/06_21_2023/", pattern="potapov|ramankutty", full.names = T)
fls
fls <- list.files("data/06_21_2023/", pattern="potapov*.byCountry|ramankutty*.byCountry", full.names = T)
fls
fls <- list.files("data/06_21_2023/", pattern="potapov.*byCountry|ramankutty.*byCountry", full.names = T)
fls
tbs <- lapply(fls, read.csv)
check <- identical(tbs[[1]][,c("ADM0_CODE","ADM0_NAME")], tbs[[2]][,c("ADM0_CODE","ADM0_NAME")])
if (nrow(tbs[[1]])==nrow(tbs[[2]])) {
cover <- cbind(tbs[[1]], tbs[[2]][,"mean"])
} else {
break
}
cover <- cbind(tbs[[1]], tbs[[2]][,"sum"])
if (nrow(tbs[[1]])==nrow(tbs[[2]])) {
cover <- cbind(tbs[[1]], tbs[[2]][,"sum"])
} else {
break
}
if (nrow(tbs[[1]])==nrow(tbs[[2]])) {
tot_ag <- cbind(tbs[[1]], tbs[[2]][,"sum"])
} else {
break
}
colnames(tot_ag)
colnames(tot_ag) <- c("ADM0_CODE","ADM0_NAME", "areaHa",str_extract(gsub(".csv", "", basename(fls[[2]])), "tic|tip"),
str_extract(gsub(".csv", "", basename(fls[[3]])), "tic|tip"))
colnames(tot_ag) <- c("ADM0_CODE","ADM0_NAME", "areaHa",str_extract(gsub(".csv", "", basename(fls[[1]])), "tic|tip"),
str_extract(gsub(".csv", "", basename(fls[[2]])), "tic|tip"))
tot_ag
colnames(tot_ag) <- c("ADM0_CODE","ADM0_NAME", "areaHa",str_extract(gsub(".csv", "", basename(fls[[1]])), "potapov|ramankutty"),
str_extract(gsub(".csv", "", basename(fls[[2]])), "potapov|ramankutty"))
head(tot_ag)
country_tot_ag <- tot_ag %>%
group_by(ADM0_CODE) %>%
summarize(sum_tot_ag_tic = sum(potapov, na.rm=T),
sum_tot_ag_tip = sum(ramankutty, na.rm=T))
country_tot_ag$ISO3 <- countrycode::countrycode(country_tot_ag$ADM0_CODE, "gaul", "iso3c")
country_tot_ag$full_name <- countrycode::countrycode(country_tot_ag$ADM0_CODE, "gaul", "country.name")
country_tot_ag$ISO3[country_tot_ag$ADM0_CODE==147295] <- "CHN"
country_tot_ag$ISO3[country_tot_ag$ADM0_CODE==147296] <- "TWN"
country_tot_ag$full_name[country_tot_ag$ADM0_CODE==147295] <- "China"
country_tot_ag$full_name[country_tot_ag$ADM0_CODE==147296] <- "Taiwan"
country_tot_ag <- subset(country_tot_ag, !is.na(ISO3))
country_tot_ag <- country_tot_ag[!duplicated(country_tot_ag),]
head(country_tot_ag)
ctry_df <- left_join(ctry_df, country_tot_ag, by="ISO3")
nrow(country_tot_ag)
nrow(ctry_df)
write.csv(ctry_df, "data/06_16_2023/country_results_06212023.csv")
biome_df <- read.csv("data/06_21_2023/biome_results_06212023.csv")
fls <- list.files("data/06_21_2023/",
pattern="potapov.*byBiome|ramankutty.*byBiome", full.names = T)
fls
tbs <- lapply(fls, read.csv)
tot_ag
tot_ag <- dplyr::inner_join(tbs[[1]], tbs[[2]], by=c("BIOME_NUM", "BIOME_NAME"))
tot_ag
tot_ag <- dplyr::inner_join(tbs[[1]], tbs[[2]], by=c("BIOME_NUM", "BIOME_NAME"))[c(1:10),]
tot_ag
colnames(tot_ag) <- c("BIOME_NAME","BIOME_NUM", str_extract(gsub(".csv", "", basename(fls[[1]])), "potapov|ramankutty"),
str_extract(gsub(".csv", "", basename(fls[[2]])), "potapov|ramankutty"))
class(tot_ag$BIOME_NUM) <- class(as.numeric(tot_ag$BIOME_NUM))
biome_df <- left_join(biome_df, tot_ag, by="ISO3")
biome_df <- left_join(biome_df, tot_ag, by="BIOME_NUM")
biome_df
colnames(tot_ag) <- c("BIOME_NAME","BIOME_NUM", "tic", "tip")
biome_df <- read.csv("data/06_21_2023/biome_results_06212023.csv")
biome_df <- left_join(biome_df, tot_ag, by="BIOME_NUM")
write.csv(biome_df, "data/06_21_2023/biome_results_06212023.csv")
head(biome_df)
write.csv(biome_df, "data/06_21_2023/biome_results_06212023.csv")
write.csv(ctry_df, "data/06_21_2023/country_results_06212023.csv")
library(tidyverse)
setwd("C:/Users/vgriffey/OneDrive - Conservation International Foundation/Documents/GitHub/Trees_in_Agriculture/")
# ------------------------------------------------------------------------
# ------------------------------------------------------------------------
#results by biome then reformatted to long for ggplot
df <- read.csv("data/06_21_2023/biome_results_06212023.csv")
df_long <- reshape2::melt(df, id.vars=c("BIOME_NUM","BIOME_NAME"), measure.vars=c("Crop_TotalC_sum_MgC_30yr", "Graze_TotalC_sum_MgC_30yr"))
#results by biome then reformatted to long for ggplot
df <- read.csv("data/06_21_2023/biome_results_06212023.csv")
head(df)
#results by biome then reformatted to long for ggplot
df <- read.csv("data/06_21_2023/biome_results_06212023.csv")
df_long <- reshape2::melt(df, id.vars=c("BIOME_NUM","BIOME_NAME"), measure.vars=c("Crop_TotalC_sum_MgC_30yr", "Graze_TotalC_sum_MgC_30yr"))
names(df_long) <- c("BIOME_NUM","BIOME_NAME","variable","value")
#cleaning up lots of names and abbreviations
df_long <- df_long %>% mutate(biome_abbrev = case_when(
BIOME_NAME == "Mediterranean Forests, Woodlands & Scrub" ~"MF" ,
BIOME_NAME == "Temperate Broadleaf & Mixed Forests" ~"TeBMF" ,
BIOME_NAME ==  "Temperate Grasslands, Savannas & Shrublands" ~ "TeGSS",
BIOME_NAME == "Tropical & Subtropical Dry Broadleaf Forests" ~ "TrSDBF",
BIOME_NAME == "Tropical & Subtropical Grasslands, Savannas & Shrublands" ~ "TrSGSS",
BIOME_NAME ==  "Tropical & Subtropical Moist Broadleaf Forests" ~ "TrSMBF",
BIOME_NAME ==  "Deserts & Xeric Shrublands" ~ "DXS",
BIOME_NAME ==  "Montane Grasslands & Shrublands" ~ "MGSS",
BIOME_NAME ==  "Temperate Conifer Forests" ~ "TeCF",
BIOME_NAME ==  "Tropical & Subtropical Coniferous Forest" ~ "TrSCF",
BIOME_NAME ==  "Tropical & Subtropical Grasslands, Savannas, and Shrublands" ~ "TrSGSS"
))
df_long$biome_abbrev <- factor(df_long$biome_abbrev, levels=c("DXS","MF","MGSS","TeGSS","TeCF","TeBMF","TrSGSS","TrSDBF","TrSMBF"))
df_long <- df_long %>% mutate(climate=case_when(biome_abbrev=="DXS" ~ "Desert",
biome_abbrev=="MF" ~ "Mediterranean",
biome_abbrev=="MGSS" ~ "Montane",
biome_abbrev=="TeBMF"~"Temperate",
biome_abbrev=="TeGSS"~"Temperate",
biome_abbrev=="TeCF" ~ "Temperate",
biome_abbrev=="TrSDBF" ~ "Tropical/Subtropical",
biome_abbrev=="TrSGSS" ~ "Tropical/Subtropical",
biome_abbrev=="TrSMBF" ~ "Tropical/Subtropical"))
df_long <- df_long %>% mutate(forested=case_when(biome_abbrev=="MGSS" ~ "Forest",
biome_abbrev=="TeBMF"~"Forest",
biome_abbrev=="TeCF" ~ "Forest",
biome_abbrev=="TrSDBF" ~ "Forest",
biome_abbrev=="TrSMBF" ~ "Forest"))
#remove tropical coniferous forests
df_long <- subset(df_long, biome_abbrev!="TeCF")
#conversiont to Pg of CO2
df_long$value <- df_long$value/1000000000*(44/12)
write.csv(df_long, "C:/Users/vgriffey/OneDrive - Conservation International Foundation/VivianAnalyses/figure6_outputData.csv")
library(tidyverse)
library(reshape2)
library(RColorBrewer)
library(ggrepel)
library(terra)
library(patchwork)
library(sf)
library(scales)
# ------------------------------------------------------------------------
# ------------------------------------------------------------------------
#read in results by country
cts <- read.csv("C:/Users/vgriffey/OneDrive - Conservation International Foundation/Documents/GitHub/Trees_in_Agriculture/data/06_16_2023/country_results_partial_06212023.csv")
#read in results by country
cts <- read.csv("C:/Users/vgriffey/OneDrive - Conservation International Foundation/Documents/GitHub/Trees_in_Agriculture/data/06_21_2023/country_results_06212023.csv")
cts <- cts[,c("ISO3","NAME","Crop_TotalC_sum_MgC","Graze_TotalC_sum_MgC",
"Crop_FluxDensity_mean_MgC.ha.yr", "Graze_FluxDensity_mean_MgC.ha.yr",
"CropArea_sum_ha_positiveDelta","GrazeArea_sum_ha_positiveDelta",
"Crop_Delta_mean_percent","Graze_Delta_mean_percent")]
#################
#make multiple dataframes of each measure of interest into long format then combine together
long_delta <- reshape2::melt(cts, id.vars=c("ISO3","NAME"), measure.vars=c("Crop_Delta_mean_percent","Graze_Delta_mean_percent"),
# Name of the destination column that will identify the original
# column that the measurement came from
variable.name="Ag.Type",
value.name="Delta")
long_ha <- reshape2::melt(cts, id.vars=c("ISO3","NAME"), measure.vars=c("CropArea_sum_ha_positiveDelta","GrazeArea_sum_ha_positiveDelta"),
variable.name="Ag.Type",
value.name="AgArea_ha")
long_mgC <- reshape2::melt(cts, id.vars=c("ISO3","NAME"), measure.vars=c("Crop_TotalC_sum_MgC","Graze_TotalC_sum_MgC"),
variable.name="Ag.Type",
value.name="Total_MgC")
long_flux <- reshape2::melt(cts, id.vars=c("ISO3","NAME"), measure.vars=c("Crop_FluxDensity_mean_MgC.ha.yr","Graze_FluxDensity_mean_MgC.ha.yr"),
variable.name="Ag.Type",
value.name="Flux_density")
long_delta$Ag.Type <- substr(long_delta$Ag.Type, 1, 4)
long_ha$Ag.Type <- substr(long_ha$Ag.Type, 1, 4)
long_mgC$Ag.Type <- substr(long_mgC$Ag.Type, 1, 4)
#long_mgC_standardized$Ag.Type <- substr(long_mgC_standardized$Ag.Type, 1, 4)
long_flux$Ag.Type <- substr(long_flux$Ag.Type,1,4)
long <- full_join(long_delta, long_ha, by=c("ISO3","NAME","Ag.Type")) %>%
full_join(long_mgC, by=c("ISO3","NAME","Ag.Type")) %>%
#full_join(long_mgC_standardized, by=c("ISO3","NAME","Ag.Type")) %>%
full_join(long_flux, by=c("ISO3","NAME","Ag.Type"))
long$NAME <- ifelse(long$ISO3=="COG", "Congo",long$NAME)
#################
#create majority tropical/outside of tropics division
countries_shp <- vect("C:/Users/vgriffey/Downloads/countries_shp/countries.shp") %>%
aggregate("ISO3")
coords_trop <- rbind(c(-180, -23.5), c(-180, 23.5),  c(180, 23.5), c(180, -23.5))
colnames(coords_trop) <- c('x', 'y')
p_trop <- vect(coords_trop, "polygons", crs="epsg:4326")
#get countries that intersect tropics bounding box and mark as intersecting
countries_tropical_intersect <- intersect(countries_shp, p_trop) %>%
as.data.frame()
countries_tropical_intersect$tropical <- "Y"
countries_tropical_intersect <- countries_tropical_intersect[!duplicated(countries_tropical_intersect$ISO3),]
#join countries that intersect tropics back with full country shapefile
countries_shp <- st_as_sf(countries_shp)
countries_shp <- left_join(countries_shp,
countries_tropical_intersect[,c("ISO3","tropical")])
##make dataframe of majority tropical countries
#quick and dirty bc I don't feel like coding
countries_shp_sub <- subset(countries_shp, tropical=="Y")
countries_shp_sub <- subset(countries_shp_sub, COUNTRY != "Argentina" & COUNTRY!="French Southern Territories" & COUNTRY!="Australia"&
COUNTRY!="BAHAMAS" & COUNTRY!="Chile" & COUNTRY!="China" & COUNTRY!="Algeria" & COUNTRY!="Egypt" & COUNTRY!="Western Sahara"
& COUNTRY!="Saudi Arabia" & COUNTRY!="United States" & COUNTRY!="United States Minor Outlying Islands" & COUNTRY!="South Africa")
countries_shp_sub$tropical_majority <- "Y"
countries_shp_sub <- as.data.frame(countries_shp_sub)
countries_shp <- left_join(st_as_sf(countries_shp),
countries_shp_sub[,c("ISO3","tropical_majority")])
#combine finished majority tropical/outside tropics dataframe with long formatted df from earlier
long_updated <- left_join(long, as.data.frame(countries_shp)[,c("ISO3","tropical_majority")], by="ISO3")
long_updated$lat <- ifelse(is.na(long_updated$tropical_majority), "Outside Tropics", "Majority Tropical")
long_updated$lat <- factor(long_updated$lat, levels=c("Majority Tropical","Outside Tropics"))
long_updated$tropical_majority <- NULL
# need to deal only with cropland measurements so we can rank top performing countries within cropland
long_updated_crop <- long_updated[long_updated$Ag.Type=="Crop",]
long_updated_crop <- long_updated_crop[complete.cases(long_updated_crop),]
#create rank of crop flux density
order.scores<-order(long_updated_crop$Flux_density, long_updated_crop$ISO3, decreasing = T)
long_updated_crop$flux_rank <- NA
long_updated_crop$flux_rank[order.scores] <- 1:nrow(long_updated_crop)
long_updated_crop$flux_rank <- ifelse(is.na(long_updated_crop$Flux_density), NA, long_updated_crop$flux_rank)
max(long_updated_crop$flux_rank, na.rm = T)
long_updated_crop$flux_rank <- ifelse(long_updated_crop$flux_rank <=5, "Global Top 5",ifelse(
long_updated_crop$flux_rank >= 172, "Global Bottom 5", "Other Countries")
)
#create rank of crop total mitigation in 30 years
order.scores<-order(long_updated_crop$Total_MgC, long_updated_crop$ISO3 , decreasing = T)
long_updated_crop$total_MgC_rank <- NA
long_updated_crop$total_MgC_rank[order.scores] <- 1:nrow(long_updated_crop)
max(long_updated_crop$total_MgC_rank, na.rm = T)
long_updated_crop$total_MgC_rank <- ifelse(long_updated_crop$total_MgC_rank <=5, "Global Top 5",ifelse(
long_updated_crop$total_MgC_rank >= 172 , "Global Bottom 5", "Other Countries")
)
# need to deal only with grazing land measurements so we can rank top performing countries within grazing land
long_updated_graz <- long_updated[long_updated$Ag.Type=="Graz",]
long_updated_graz <- long_updated_graz[complete.cases(long_updated_graz),]
#create rank of grazing flux density
order.scores <- order(long_updated_graz$Flux_density, long_updated_graz$ISO3, decreasing = T)
long_updated_graz$flux_rank <- NA
long_updated_graz$flux_rank[order.scores] <- 1:nrow(long_updated_graz)
long_updated_graz$flux_rank <- ifelse(is.na(long_updated_graz$Flux_density), NA, long_updated_graz$flux_rank)
max(long_updated_graz$flux_rank, na.rm = T)
long_updated_graz$flux_rank <- ifelse(long_updated_graz$flux_rank <=5, "Global Top 5",ifelse(
long_updated_graz$flux_rank >= 78, "Global Bottom 5", "Other Countries")
)
#create rank of grazing total mitigation in 30 years
order.scores<-order(long_updated_graz$Total_MgC, long_updated_graz$ISO3 , decreasing = T)
long_updated_graz$total_MgC_rank <- NA
long_updated_graz$total_MgC_rank[order.scores] <- 1:nrow(long_updated_graz)
max(long_updated_graz$total_MgC_rank, na.rm = T)
long_updated_graz$total_MgC_rank <- ifelse(long_updated_graz$total_MgC_rank <=5, "Global Top 5",ifelse(
long_updated_graz$total_MgC_rank >= 78, "Global Bottom 5", "Other Countries")
)
#combine cropland and grazing land rank datasets back together
long_updated <- rbind(long_updated_crop, long_updated_graz)
#update labels and factors for various columns
long_updated$flux_rank <- factor(long_updated$flux_rank, levels=c("Global Top 5","Other Countries","Global Bottom 5"))
long_updated$total_MgC_rank <- factor(long_updated$total_MgC_rank, levels=c("Global Top 5","Other Countries","Global Bottom 5"))
long_updated$Rank <- ifelse(long_updated$total_MgC_rank=="Global Top 5" | long_updated$flux_rank=="Global Top 5", "Global Top 5",
ifelse(long_updated$total_MgC_rank=="Global Bottom 5" | long_updated$flux_rank=="Global Bottom 5", "Global Bottom 5", "Other Countries"))
long_updated$Rank <- factor(long_updated$Rank, levels=c("Global Top 5","Global Bottom 5","Other Countries"))
long_updated$Rank_group_label <- ifelse(long_updated$flux_rank=="Global Top 5" | long_updated$flux_rank=="Global Bottom 5" ,"flux",
ifelse(long_updated$total_MgC_rank=="Global Top 5" | long_updated$total_MgC_rank=="Global Bottom 5", "total_mgC", "greyedout"))
long_updated$Ag.Type <- ifelse(long_updated$Ag.Type=="Graz","Grazing Land","Cropland")
long_updated$Geography <- long_updated$lat
#calculate 90th percentile of total mitigation and flux density values
totmit_crop_90 <- quantile(long_updated$Total_MgC, c(0.90))
totmit_graze_90 <- quantile(cts$Graze_TotalC_sum_MgC, c(0.90))
fluxdens_crop_90 <- quantile(cts$Crop_FluxDensity_mean_MgC.ha.yr, c(0.90), na.rm=T)
fluxdens_graze_90 <- quantile(cts$Graze_FluxDensity_mean_MgC.ha.yr, c(0.90), na.rm=T)
long_updated$total_mitigation_90 <- ifelse(long_updated$Ag.Type=="Cropland", totmit_crop_90, totmit_graze_90)
long_updated$fluxdens_90 <- ifelse(long_updated$Ag.Type=="Cropland", fluxdens_crop_90, fluxdens_graze_90)
long_updated$country_label <- ifelse(long_updated$Flux_density<long_updated$fluxdens_90 & long_updated$Total_MgC<long_updated$total_mitigation_90, "label", "nolabel")
long_updated$country_label[long_updated$NAME=="Cambodia"] <- "label"
write.csv(long_updated, "C:/Users/vgriffey/OneDrive - Conservation International Foundation/VivianAnalyses/figure9_outputData.csv")
